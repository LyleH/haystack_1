Hello. My name is ... and we are the Code Blacks.
We built a cloud app that solves one of our biggest inefficiencies here at Ambit Asset Finance.
We asked ... what our biggest inefficiency was and they said fixing test failures so that is problem we solved.
We wanted to quantify how much time and money was spent diagnosing and fixing test failures.
We asked our best developers how much time they spent fixing tests and what was the maximum amount of time spent fixing a single test.
The results were...

Thanks Alven. It's going to be my job now to find the needle in the haystack.
I, personally, think it is better described as trying to find the piece of hay in the stack of needles.
In our business unit, we had millions of lines of source code and this changes approximately 100 times a day.
Maintaining the tests takes a large amount of effort and energy.
Haystack is trying to reduce this.
We tested Haystack on an open source project called RestSharp.
It gives developers easy access to internal or third-party web systems.
This product has been downloaded over 900 thousand times.
This is a list of tests from RestSharp.
This is real data.
You can see that one of these tests needs to be investigated.
If we click on the test, we'll be able to see the work that Haystack did.

If we look at the results, we can see there is a line emphasized in dark red.
We've found our needle.
This is the line of code that made the test unhappy.
There may have been other lines that changed, but these were ignored because they were not the ones that broke the test.
You can see some lines are green.
This means they were executed by the test.
You can see some lines are light red.
This means they were not executed by the test.
Haystack will also highlight were the code has been executed a different number of times.

While building Haystack we got to use some real cool new technology.
We used Visual Studio 2015 for development and Azure for deployment.
Our comparison algorithm used OpenCover, ReportGenerator and DiffPlex.
Haystack works by running the test when it last passed.
After that, it runs the test when it required investigation.
And compares the results.
It runs the tests with code coverage, which determines the lines of code the test executed.
We deployed onto Azure using a WebJob that was connected to a command queue, a storage container for input and
a storage container for output.
Haystack is a really good solution that makes a very complex problem a lot simpler.
This is the first test diagnostic solution I've heard of.
I feel that it's a pity that I've spent so much time in my career diagnosing issues that this
tool could have helped me with and I'm looking forward to using it.
It has significant benefits which Alven will now tell you about.

So let's analyze it.
For our analysis, we need the tests files when the test last passed and the current test files with the broken test.
We zip these up and send them to our web server hosted by Azure in the cloud.
This saves the zip file to an Azure Storage location and adds a message to an Azure queue.
A background process picks up the message from the queue, retrieves the zip file and performs the comparison.
It does this by running the passing test and the failing test with code coverage, which provides which source code lines that the test used.
Once we have this information, we compare it and determine the differences.
We used OpenCover and ReportGenerator for code coverage and DiffPlex for some text comparisons.
We store the comparison report in Azure Storage and it is ready to be used by the developer.


We thought this was a good result, but we didn't want you to take our word for it.
We went back to the developers we interviewed above and asked them what they thought about it and they said ...

In conclusion:
We identify one of the large development inefficiencies.
We created a solution to improve it by up to ...
We succeeded and developers can't wait to use it.

Thanks for listening. I hope you enjoyed this presentation.
